데센프 - 시험..? 17 19 중..
빅문 - 17일
리눅스 - 12일
비전 - CNN
머신러닝 - 20일

1p)
커뮤니케이션을 가능하게 하는 인프라 = 네트워크
커뮤니케이션 (데이터 주고 받기) => ex, 전화

우리의 관심사는 스위치 네트워크

스위치 네트워크의 2가지

circuit 스위치드
packet 스위치드

2p)
circuit이 만들어진 것을 볼 수 있음.

3p)
스위치는 똑같은데 작은 패킷 단위로! 스위칭을 해가지고 (디지털 데이터 패킷)
각각 장단점을 알아야댐.

서킷 스위치: QOS가 보장..? 이 선(경로)는 그 단말 2개만 써서 다른 애들이 간섭 x, 자유롭게 데이터가 흐름.
전화 같은데 좋음..
단점은 그대신 단말 2개만 그 경로를 사용하니 너무 과소비하는 느낌임 경로 넓은대도 얘네 둘만씀.

패킷 스위치: 서킷의 반대.
효율적으로 경로 사용. 용량 제한이 없음.
단점: 너무 많은 패킷이 들어가면, 딜레이와 충돌 등 드랍되는 것도 있음. QOS(퀄리티 오브 서비스)가 보장이 잘 안됨.
하지만 경제적... 많은 서비스를 전달 할 수 있음. 현대.. 거의 패킷이 더많음. (패킷: 070, 휴대폰.. 서킷: 집전화, 031 등등 이런거)

===== 이번 장 내용아닌 저번에 추가 설명 ======
mutex_lock 까지 하고 인터룹트 걸림. (스레드 기준..)
그 후 다른 스레드가 또 uslepp하면 락 풀리지 않냐?

아니다.. 지금 cond, mutex, ts, tv는 shared data가 아니기 때문에 
하지만 전역변수 등은 같이 공유 = 데이터 세그먼트
==============================================

데이터 그램 네트워크: 목적지 알고 패킷 던지면 알아서 스위치가 라우팅해서 전해줌. (인터넷 프로토콜 IP) ,, 인터넷 컴퓨터 네트워크
버츄얼 서킷 네트워크: 이동전화.. 케이블 다 유선으로 깔아서 뭐 함..

4p)
OSI 7계층)

피지컬 레이어 - 유선: 케이블 / 무선: ..?
데이터 링크 - 유선: 이웃 노드간의 정보 잘 전달.// 무선은 스마트폰 -> AP(액세스 포인터) 이더넷/무선랜(WLAN), 와이파이는 이걸 응용한것,이걸 표준화 한게 IEEE // 이더넷 802.3, WLAN 802.11 -> LAN정도가! 이더넷 통일.. (경희대에서 정보처 까지.. 정도)/ 블루투스 802.15.??
LTE

네트워크 레이어 - 데이터링크 여러개 합쳐 => end to end path 사이에 패킷 전달 담당(길 찾음.)
IP => 운영체제가 처리함.

transport 레이어 - tcp, udp => app 프로세스간..
TCP, UDP도 운영체제가 처리

데이터링크부터는 주소가 필요 MAC address
네트워크: ip address
process간: port number

tcp: 신뢰성, 양방향, 커넥션
udp: 걍 보냄, 단방향, 커넥션레스

중간에 패킷이 한개 전달 안됨..?
-> 중간 스위치에서 너무 패킷이 많아서 밀려서 없어진것.. -> 컨제스트 컨트롤 필요 (tcp에서 쓰고 있는..)

위에 3개 layer => application layer.. => app에서 할일 하는것. => http, ftp, ssh, tellnet, smtp(메일 보낼때), imap(메일 가져올 떄), pop3.. 등 등 등..

실습때 만들 방식도 나만쓰는 프로토콜임 정식이 아니지만.

9p)

tcp 포트넘버 80번(http 디폴트)
-> IP에 데스티네이션(www.naver.com)의 4바이트
-> 이더넷의 목적지 해서 (주변 neighbor 노드의 목적지!!!) -> 보통 ~~~.1로 끝..(IP에서는)  MAC어드레스는 어케암?? ARP로 알아서 목적지 알아낸다.

이제 그 이더넷으로 다 전달하고 내꺼면 받고 내꺼 아니면 버림.

www.naver.com 들어갈때 정보 전달하는 과정. -> 8p 설명.

ARP 한번한뒤 계속 그 결과 씀? => caching..?

10p로 이루어짐.

이더넷 - 6바이트 맥어드레스

13p)
tcp, udp 어떤거 쓸지 골라야함 -> 두개가 뭔지 알아야함.

http-> html 전송 -> 깨지면 안됨. -> tcp 써야됨.
tcp 개많음....... 중간에 날라가면 안되자너...

udp -> 게임 서버, 스트리밍 같은거..! 조금 잃어도되고 재전송 할필요 없음 왜냐면 사용자가 계속 재전송하니

17p)

PF_INET = 인터넷..! PF_UNIX는 피포임. 굳이 쓸필요 없고 FIFO 사용하면됨.
실제 실습은 PF_INET => 프로토콜 패밀리_인터넷

SOCK_STREAM : TCP
SOCK_DGRAM : UDP

unix 도메인은 안해도된다.

20p)
listen 동시에 접속할거 갯수.. 5 일반적으로 넣음 => 거의 안씀

accept 클라이언트 오길 기다림?

소켓 디스크립터 두개 필요
1. 커넥션 기다리는거
2. ??

-- 패킷 주고 받는거 --
send receive 말고 write read 더씀.
send receive => tcp
sendto receiveto => udp

2
=====
문자열 가지고 노는법 + 파일 오픈 등등 알기
=====


서버한개가 5클라이언트 관리 => 비동기는 : 서버에서 5개 쓰레드 만들고 처리
그외에 1개 프로세스로 처리 하고 싶다 -> 싱크로 IO 멀티플렉싱 ====> 셀렉트
